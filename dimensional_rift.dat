comments{
}
info{
rowcount:22
colcount:42
camerapos:Translation: X=933.825 Y=6065.929 Z=30.000 Rotation: P=44.999832 Y=-89.999977 R=0.000000 Scale X=1.000 Y=1.000 Z=1.000
biome:rock
creator:pepijn
spiderrate:10
spidermin:2
spidermax:4
version:2023-08-14-1
opencaves:13,3/4,7/9,7/19,2/4,19/10,17/11,12/3,16/
camerazoom:1700.0
levelname:Dimensional rift
}
tiles{
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,1,1,1,12,50,38,38,38,38,38,38,38,38,38,38,26,26,26,101,38,38,38,38,50,112,101,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,26,26,26,38,38,38,38,38,38,34,34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,1,38,38,38,38,38,38,38,50,38,38,50,38,38,38,1,50,38,38,38,38,38,38,38,34,34,38,38,38,50,38,38,50,38,38,38,38,38,38,50,38,
38,1,1,1,11,11,1,1,1,12,1,1,12,38,38,38,38,50,1,12,50,38,38,38,38,111,111,34,38,38,112,101,101,112,101,101,101,101,101,101,112,38,
38,38,38,38,34,34,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,101,101,38,38,38,38,38,38,38,38,38,38,38,101,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,50,38,38,38,38,38,38,38,101,101,38,38,38,38,38,38,38,38,38,38,38,101,38,38,38,
38,38,38,38,38,38,38,1,38,38,38,38,38,38,38,38,38,12,38,38,38,38,38,38,38,101,101,38,38,38,38,38,38,38,38,38,38,38,112,38,38,38,
38,38,38,50,12,1,1,1,38,38,38,38,38,50,38,38,38,1,38,38,38,38,38,38,50,112,101,38,38,38,38,38,38,38,38,38,38,38,50,38,38,38,
38,38,38,38,38,38,38,1,38,38,38,38,1,12,38,38,38,1,38,38,38,38,38,38,38,38,101,101,101,101,101,101,101,101,112,50,38,38,38,38,38,38,
38,38,38,38,38,38,38,1,1,1,38,38,1,1,38,38,38,1,38,38,38,38,38,38,38,38,38,101,101,101,101,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,34,38,1,38,38,38,1,1,38,38,38,1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,50,38,38,38,38,38,38,1,38,38,38,1,1,38,38,38,1,38,38,38,38,50,38,38,38,38,38,38,38,38,38,38,50,50,38,38,38,38,38,38,38,
38,12,1,1,1,38,38,38,12,50,38,50,6,6,50,38,38,12,38,38,38,38,112,38,38,38,38,38,50,112,101,101,101,106,106,101,101,101,112,50,38,38,
38,38,38,38,38,38,38,38,38,38,38,50,6,6,50,38,38,50,38,38,38,38,101,38,38,38,38,38,38,38,101,101,101,106,106,101,101,101,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,1,1,38,38,38,38,38,38,38,38,101,38,38,38,38,38,38,38,38,38,38,50,50,38,38,38,38,38,38,38,
38,38,12,1,1,1,1,1,38,38,38,38,1,1,38,38,38,38,38,38,38,38,101,112,50,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,1,1,1,1,1,1,1,38,38,38,38,38,38,38,38,101,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,50,38,38,50,38,38,38,38,38,38,38,38,12,38,38,38,38,38,38,38,38,101,38,38,38,38,38,38,38,38,101,101,101,112,50,38,38,38,38,38,38,
38,12,1,1,12,38,38,38,38,38,38,38,38,50,38,38,38,38,38,38,38,38,112,38,38,112,101,101,101,101,101,101,101,101,38,38,38,38,38,38,38,38,
38,1,1,1,1,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,50,38,38,50,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,
}
height{
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
}
resources{
crystals:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
ore:
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
}
objectives{
findminer:2
findminer:3
}
buildings{
}
landslidefrequency{
}
lavaspread{
}
miners{
ID=0,Translation: X=1433.992 Y=6200.370 Z=91.603 Rotation: P=0.008435 Y=0.217107 R=-0.141745 Scale X=1.000 Y=1.000 Z=1.000,Drill/JobDriver/
ID=3,Translation: X=5804.009 Y=466.050 Z=52.150 Rotation: P=0.000000 Y=3.045539 R=0.000000 Scale X=1.000 Y=1.000 Z=1.000,Drill/
ID=2,Translation: X=5881.937 Y=481.415 Z=52.150 Rotation: P=0.000000 Y=0.968767 R=0.000000 Scale X=1.000 Y=1.000 Z=1.000,Drill/
ID=1,Translation: X=540.181 Y=6173.728 Z=222.233 Rotation: P=-0.009111 Y=179.983643 R=-0.012191 Scale X=1.000 Y=1.000 Z=1.000,Drill/JobDriver/
}
briefing{
Our scanners picked up mysterious signatures, but the miners we sent down to investigate have dropped off the radar without warning. We'll send you down with some heavy machinery to investigate. We even got you an experimental upgrade from that guy Baz. Find those missing miners, Cadet!
}
briefingsuccess{
You found the raiders in their multidimensional malaise, good job!
}
briefingfailure{
Those miners are nowhere to be found... Have you tried standing on two slug holes at the same time?
}
vehicles{
VehicleLMLC_C,Translation: X=1203.308 Y=6199.520 Z=0.013 Rotation: P=0.008435 Y=0.217107 R=0.013167 Scale X=1.000 Y=1.000 Z=1.000,upgrades=UpAddNav/,driver=0,ID=1,Essential=true
VehicleGraniteGrinder_C,Translation: X=571.128 Y=6173.719 Z=-0.647 Rotation: P=-0.009125 Y=179.983658 R=-0.011780 Scale X=1.000 Y=1.000 Z=1.000,upgrades=UpAddNav/,driver=1,ID=0,Essential=true
}
creatures{
}
blocks{
17/EventCallEvent:13,8,5.0,vehicleEnteredPortal
19/EventCallEvent:13,17,5.0,vehicleEnteredPortal
21/EventCallEvent:16,2,5.0,vehicleEnteredPortal
23/EventCallEvent:18,13,5.0,vehicleEnteredPortal
25/EventCallEvent:19,1,5.0,vehicleEnteredPortal
11/EventCallEvent:8,4,5.0,vehicleEnteredPortal
15/EventCallEvent:13,1,5.0,vehicleEnteredPortal
27/EventCallEvent:19,4,5.0,vehicleEnteredPortal
13/EventCallEvent:9,13,5.0,vehicleEnteredPortal
1/EventCallEvent:1,4,5.0,vehicleEnteredPortal
3/EventCallEvent:4,9,5.0,vehicleEnteredPortal
5/EventCallEvent:4,12,5.0,vehicleEnteredPortal
7/EventCallEvent:4,19,5.0,vehicleEnteredPortal
9/EventCallEvent:7,17,5.0,vehicleEnteredPortal
6/TriggerEnter:4,12,5.0,_,false,true
8/TriggerEnter:4,19,5.0,_,false,true
10/TriggerEnter:7,17,5.0,_,false,true
12/TriggerEnter:8,4,5.0,_,false,true
14/TriggerEnter:9,13,5.0,_,false,true
16/TriggerEnter:13,1,5.0,_,false,true
18/TriggerEnter:13,8,5.0,_,false,true
20/TriggerEnter:13,17,5.0,_,false,true
22/TriggerEnter:16,2,5.0,_,false,true
24/TriggerEnter:18,13,5.0,_,false,true
26/TriggerEnter:19,1,5.0,_,false,true
28/TriggerEnter:19,4,5.0,_,false,true
2/TriggerEnter:1,4,5.0,_,false,true
4/TriggerEnter:4,9,5.0,_,false,true
6-5
8-7
10-9
12-11
14-13
16-15
18-17
20-19
22-21
24-23
26-25
28-27
2-1
4-3
}
script{
# Dimensional Rift - Dynamic Map Swapping System
# Map dimensions: 22 rows x 42 columns
# Divided into two halves: left (cols 0-20) and right (cols 21-41)

# Primary map dimensions (only values to change for resizing)
int mapRows=22
int mapCols=42

# Derived variables (calculated in init)
int halfCols=0
int maxCols=0
int maxArrayIndex=0
int maxRowIndex=0
int rightColStart=0

# Arrays to store map halves - each array stores tiles for one half
intarray leftHalfTiles
intarray rightHalfTiles

# Utility variables for recursive copying operations
int currentRow=0
int currentCol=0
int arrayIndex=0
int vehicleIndex=0

# Additional utility variables for swapping operations
int sourceRow=0
int sourceCol=0
int targetRow=0
int targetCol=0
int tempTileId=0
bool validTile=true
bool copyInProgress=false

# Generalized loop control variables
bool leftMap=true
bool leftArray=true

# Dimension tracking
bool inNormalDimension=true

# Task queue for sequential operations (enum values)
# 0 = done/no next task
# 1 = startArea
# 2 = readRightHalfToArray (init sequence)
int nextTask=0

# Vehicle variables
vehicle gg=0
vehicle lmlc=1

if(time:10)[welcome]

welcome::;
msg::"Nothing to see but slug holes, where could they be? Surely not in the slug tunnels?";

# Initialize all derived variables from mapRows and mapCols
init::;
halfCols=mapCols//2;
rightColStart=halfCols;
maxRowIndex=mapRows-1;
maxArrayIndex=mapRows*halfCols;
maxArrayIndex-=1;
nextTask=2;
readLeftHalfToArray;

readLeftHalfToArray::;
leftMap=true;
leftArray=true;
generalizedLoop;

readRightHalfToArray::;
leftMap=false;
leftArray=false;
generalizedLoop;

# Generalized loop for reading/writing map halves to/from arrays
generalizedLoop::;
((copyInProgress==false))initializeLoop;
((arrayIndex<=maxArrayIndex))[processArrayElement][completionHandler];

initializeLoop::;
currentRow=0;
arrayIndex=0;
copyInProgress=true;
((leftMap==true))currentCol=0;
((leftMap==false))currentCol=rightColStart;
((leftMap==true))maxCols=halfCols;
((leftMap==false))maxCols=mapCols;

processArrayElement::;
tempTileId=get(currentRow)(currentCol);
validTile=true;
((tempTileId>100))validTile=false;
((tempTileId>100))tempTileId-=100;
((leftArray==true))leftHalfTiles[arrayIndex]=tempTileId;
((leftArray==false))rightHalfTiles[arrayIndex]=tempTileId;
((tempTileId==lava))validTile=false;
((tempTileId==water))validTile=false;
vehicleIndex=gg.row*halfCols;
vehicleIndex+=gg.col;
((arrayIndex==vehicleIndex))validTile=false;
vehicleIndex=lmlc.row*halfCols;
vehicleIndex+=lmlc.col;
((arrayIndex==vehicleIndex))validTile=false;
((validTile==true))place:currentRow,currentCol,solid_rock;
incrementAndAdvance;

incrementAndAdvance::;
arrayIndex+=1;
currentCol+=1;
((currentCol>=maxCols))resetColAndAdvanceRow;
wait:0.0;
generalizedLoop;

resetColAndAdvanceRow::;
((leftMap==true))currentCol=0;
((leftMap==false))currentCol=rightColStart;
((currentRow<maxRowIndex))currentRow+=1;

completionHandler::;
copyInProgress=false;
((nextTask==2))readRightHalfToArray;
((nextTask==1))startArea;
nextTask-=1;

startArea::;
leftArray=true;
read=false;
floodfill;

# flood fill algorithm

# flood fill variables
intarray fillTileRows
intarray fillTileCols
int taskidx=0
bool read=true

floodfill::;
fillTileRows[taskidx]=gg.row;
fillTileCols[taskidx]=gg.col;
taskidx+=1;
fillTileRows[taskidx]=lmlc.row;
fillTileCols[taskidx]=lmlc.col;
taskidx+=1;
doFloodFill;

doFloodFill::;
taskidx-=1;
currentRow=fillTileRows[taskidx];
currentCol=fillTileCols[taskidx];
currentRow-=1;
considerTile;
currentCol+=1;
considerTile;
currentRow+=1;
considerTile;
currentRow+=1;
considerTile;
currentCol-=1;
considerTile;
currentCol-=1;
considerTile;
currentRow-=1;
considerTile;
currentRow-=1;
considerTile;
wait:0.0;
((taskidx>0))[doFloodFill][completeFill];

completeFill::;
((read==false))return;
read=false;
leftArray=leftArray==false;
wait:0.0;
floodfill;

considerTile::;
((currentRow<0))return;
((currentCol<0))return;
((currentCol>=mapCols))return;
((currentRow>=mapRows))return;
tempTileId=get(currentRow)(currentCol);
arrayIndex=currentRow*halfCols;
arrayIndex+=currentCol;
((tempTileId==lava))return;
((tempTileId==water))return;
((tempTileId>100))return;
((read==true))[readMode][writeMode];

readMode::;
((leftArray==true))[checkReadLeft][checkReadRight];

writeMode::;
((leftArray==true))[checkWriteLeft][checkWriteRight];

checkReadLeft::;
((tempTileId==solid_rock))return;
leftHalfTiles[arrayIndex]=tempTileId;
tempTileId=solid_rock;
fillTile;

checkReadRight::;
((tempTileId==solid_rock))return;
rightHalfTiles[arrayIndex]=tempTileId;
tempTileId=solid_rock;
fillTile;

checkWriteLeft::;
((leftHalfTiles[arrayIndex]==tempTileId))return;
tempTileId=leftHalfTiles[arrayIndex];
fillTile;

checkWriteRight::;
((rightHalfTiles[arrayIndex]==tempTileId))return;
tempTileId=rightHalfTiles[arrayIndex];
fillTile;

fillTile::;
place:currentRow,currentCol,tempTileId;
fillTileRows[taskidx]=currentRow;
fillTileCols[taskidx]=currentCol;
taskidx+=1;

# Swap dimensions of the left map area
swapDimensions::;
((inNormalDimension==true))[switchToAlternateDimension][switchToNormalDimension];

switchToAlternateDimension::;
inNormalDimension=false;
read=true;
leftArray=true;
floodfill;

switchToNormalDimension::;
inNormalDimension=true;
read=true;
leftArray=false;
floodfill;

# Design utility: Copy slimy slug holes (portals) from left to right half
copyPortals::;
halfCols=mapCols//2;
currentRow=0;
currentCol=0;
copyPortalsLoop;

copyPortalsLoop::;
wait:0.0;
((currentRow<mapRows))processPortalTile;

processPortalTile::;
tempTileId=get(currentRow)(currentCol);
targetCol=currentCol+halfCols;
validTile=false;
((tempTileId==slug_hole))validTile=true;
((tempTileId==lava))validTile=true;
((tempTileId==water))validTile=true;
((validTile==true))place:currentRow,targetCol,tempTileId;
tempTileId=get(currentRow)(targetCol);
validTile=false;
((tempTileId==slug_hole))validTile=true;
((tempTileId==lava))validTile=true;
((tempTileId==water))validTile=true;
((validTile==true))place:currentRow,currentCol,tempTileId;
incrementPortalPosition;

incrementPortalPosition::;
currentCol+=1;
((currentCol>=halfCols))advancePortalRow;
((currentCol<halfCols))copyPortalsLoop;

advancePortalRow::;
currentCol=0;
currentRow+=1;
copyPortalsLoop;

int xsquared
int ysquared
int distsquared

# Portal activation system - called by trigger blocks with cooldown
# Uses lastvehicle to avoid race condition where enter triggers before row/col update
vehicleEnteredPortal::;
xsquared=gg.col-lmlc.col;
xsquared=xsquared*xsquared;
ysquared=gg.row-lmlc.row;
ysquared=ysquared*ysquared;
distsquared=xsquared+ysquared;
((distsquared>2))[checkOnPortal][msg:"Try a different one!"];

checkOnPortal::;
((lastvehicle.id==gg.id))checkLmlcOnPortal;
((lastvehicle.id==lmlc.id))checkGgOnPortal;

checkLmlcOnPortal::;
tempTileId=get(lmlc.row)(lmlc.col);
((tempTileId==12))[activatePortal][msg:"The recharge seam is buzzing, but nothing happens..."];

checkGgOnPortal::;
tempTileId=get(gg.row)(gg.col);
((tempTileId==12))[activatePortal][msg:"The recharge seam is buzzing, but nothing happens..."];

activatePortal::;
msg:"Buzzing intensifies!";
wait:0.5;
swapDimensions;

}
